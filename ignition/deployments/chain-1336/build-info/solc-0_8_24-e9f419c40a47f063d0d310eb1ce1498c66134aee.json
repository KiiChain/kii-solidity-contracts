{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_24-e9f419c40a47f063d0d310eb1ce1498c66134aee",
  "solcVersion": "0.8.24",
  "solcLongVersion": "0.8.24+commit.e11b9ed9",
  "userSourceNameMap": {
    "contracts/NFTRegistration.sol": "project/contracts/NFTRegistration.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/NFTRegistration.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title NFTRegistration\n * @dev Contract for managing NFT airdrop registrations with dynamic pricing\n * Users pay an increasing amount of ERC20 tokens (ORO) to register for the airdrop\n */\ncontract NFTRegistration is Ownable, Pausable, ReentrancyGuard {\n    /**\n     * @dev The ERC20 token (ORO) used for registration payments\n     */\n    IERC20 public immutable oroToken;\n\n    /**\n     * @dev The initial registration price in ORO tokens (with decimals)\n     */\n    uint256 public immutable initialPrice;\n\n    /**\n     * @dev The percentage increase per registration (in basis points, e.g., 500 = 5%)\n     */\n    uint256 public immutable priceIncreasePercentage;\n\n    /**\n     * @dev The timestamp when registration starts\n     */\n    uint256 public immutable startDate;\n\n    /**\n     * @dev The maximum number of registration spots available\n     */\n    uint256 public immutable maxSpots;\n\n    /**\n     * @dev The current price for registration in ORO tokens\n     * Updated after each successful registration\n     */\n    uint256 public currentPrice;\n\n    /**\n     * @dev Array of addresses that have registered\n     */\n    address[] private registrants;\n\n    /**\n     * @dev Mapping to track if an address has registered\n     */\n    mapping(address => bool) private registered;\n\n    /**\n     * @dev Emitted when a user successfully registers\n     * @param user The address of the registered user\n     * @param spotNumber The spot number assigned (1-indexed)\n     * @param pricePaid The amount of ORO tokens paid\n     */\n    event Registered(\n        address indexed user,\n        uint256 spotNumber,\n        uint256 pricePaid\n    );\n\n    /**\n     * @dev Emitted when the owner withdraws ORO tokens\n     * @param owner The address of the owner\n     * @param amount The amount of ORO tokens withdrawn\n     */\n    event Withdrawn(address indexed owner, uint256 amount);\n\n    /**\n     * @dev Error thrown when registration has not started yet\n     */\n    error RegistrationNotStarted();\n\n    /**\n     * @dev Error thrown when all registration spots are taken\n     */\n    error NoSpotsAvailable();\n\n    /**\n     * @dev Error thrown when a user tries to register twice\n     */\n    error AlreadyRegistered();\n\n    /**\n     * @dev Error thrown when token transfer fails\n     */\n    error TransferFailed();\n\n    /**\n     * @dev Error thrown when there are no funds to withdraw\n     */\n    error NoFundsToWithdraw();\n\n    /**\n     * @dev Constructor to initialize the registration contract\n     * @param _oroTokenAddress The address of the ORO ERC20 token\n     * @param _initialPrice The initial registration price in ORO tokens\n     * @param _priceIncreasePercentage The percentage increase per registration (in basis points)\n     * @param _startDate The timestamp when registration opens\n     * @param _maxSpots The maximum number of registration spots\n     */\n    constructor(\n        address _oroTokenAddress,\n        uint256 _initialPrice,\n        uint256 _priceIncreasePercentage,\n        uint256 _startDate,\n        uint256 _maxSpots\n    ) Ownable(msg.sender) {\n        require(_oroTokenAddress != address(0), \"Invalid token address\");\n        require(_initialPrice > 0, \"Initial price must be greater than 0\");\n        require(_maxSpots > 0, \"Max spots must be greater than 0\");\n        require(\n            _startDate >= block.timestamp,\n            \"Start date must be in the future\"\n        );\n\n        oroToken = IERC20(_oroTokenAddress);\n        initialPrice = _initialPrice;\n        currentPrice = _initialPrice;\n        priceIncreasePercentage = _priceIncreasePercentage;\n        startDate = _startDate;\n        maxSpots = _maxSpots;\n    }\n\n    /**\n     * @dev Registers the caller for the NFT airdrop\n     * Requires payment of the current registration price in ORO tokens\n     * Can only be called when not paused, after start date, and when spots are available\n     */\n    function register() external whenNotPaused nonReentrant {\n        if (block.timestamp < startDate) {\n            revert RegistrationNotStarted();\n        }\n\n        if (registrants.length >= maxSpots) {\n            revert NoSpotsAvailable();\n        }\n\n        if (registered[msg.sender]) {\n            revert AlreadyRegistered();\n        }\n\n        uint256 price = currentPrice;\n\n        // Transfer ORO tokens from user to contract\n        bool success = oroToken.transferFrom(msg.sender, address(this), price);\n        if (!success) {\n            revert TransferFailed();\n        }\n\n        // Add user to registrants list\n        registrants.push(msg.sender);\n        registered[msg.sender] = true;\n\n        emit Registered(msg.sender, registrants.length, price);\n\n        // Update price for next registration\n        // currentPrice = currentPrice * (1 + priceIncreasePercentage/10000)\n        currentPrice =\n            (currentPrice * (10000 + priceIncreasePercentage)) /\n            10000;\n    }\n\n    /**\n     * @dev Checks if an address has registered\n     * @param user The address to check\n     * @return True if the address has registered, false otherwise\n     */\n    function hasRegistered(address user) external view returns (bool) {\n        return registered[user];\n    }\n\n    /**\n     * @dev Returns the total number of registrants\n     * @return The count of registered users\n     */\n    function count() external view returns (uint256) {\n        return registrants.length;\n    }\n\n    /**\n     * @dev Checks if there are remaining registration spots available\n     * @return True if spots remain, false if all spots are taken\n     */\n    function hasRemainingSpots() external view returns (bool) {\n        return registrants.length < maxSpots;\n    }\n\n    /**\n     * @dev Returns the number of remaining registration spots\n     * @return The number of spots still available\n     */\n    function remainingSpots() external view returns (uint256) {\n        if (registrants.length >= maxSpots) {\n            return 0;\n        }\n        return maxSpots - registrants.length;\n    }\n\n    /**\n     * @dev Returns the list of all registered addresses\n     * @return Array of addresses that have registered\n     */\n    function getRegistrants() external view returns (address[] memory) {\n        return registrants;\n    }\n\n    /**\n     * @dev Allows the owner to withdraw all ORO tokens from the contract\n     * Can only be called by the contract owner\n     */\n    function withdraw() external onlyOwner nonReentrant {\n        uint256 balance = oroToken.balanceOf(address(this));\n\n        if (balance == 0) {\n            revert NoFundsToWithdraw();\n        }\n\n        bool allowanceApproved = oroToken.approve(address(this), balance);\n        if (!allowanceApproved) {\n            revert TransferFailed();\n        }\n\n        bool success = oroToken.transferFrom(address(this), owner(), balance);\n        if (!success) {\n            revert TransferFailed();\n        }\n\n        emit Withdrawn(owner(), balance);\n    }\n\n    /**\n     * @dev Allows the owner to withdraw a specific amount of ORO tokens\n     * @param amount The amount of ORO tokens to withdraw\n     * Can only be called by the contract owner\n     */\n    function withdrawAmount(uint256 amount) external onlyOwner nonReentrant {\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(\n            oroToken.balanceOf(address(this)) >= amount,\n            \"Insufficient balance\"\n        );\n\n        bool allowanceApproved = oroToken.approve(address(this), amount);\n        if (!allowanceApproved) {\n            revert TransferFailed();\n        }\n\n        bool success = oroToken.transferFrom(address(this), owner(), amount);\n        if (!success) {\n            revert TransferFailed();\n        }\n\n        emit Withdrawn(owner(), amount);\n    }\n\n    /**\n     * @dev Pauses the contract, preventing new registrations\n     * Can only be called by the contract owner\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses the contract, allowing registrations to resume\n     * Can only be called by the contract owner\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Returns the contract's current ORO token balance\n     * @return The balance of ORO tokens held by the contract\n     */\n    function getContractBalance() external view returns (uint256) {\n        return oroToken.balanceOf(address(this));\n    }\n}\n"
      }
    }
  }
}